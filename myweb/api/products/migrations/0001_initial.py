# Generated by Django 5.2.3 on 2025-07-05 17:16

import api.products.models
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('contenttypes', '0002_remove_content_type_name'),
    ]

    operations = [
        migrations.CreateModel(
            name='Activities',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False, verbose_name='activity_id')),
                ('name', models.CharField(default='Non Named Activity', max_length=128)),
                ('description', models.TextField()),
                ('date', models.DateField()),
                ('start_time', models.TimeField()),
                ('duration_hours', models.IntegerField(help_text='duration (must be positive and less than or equal to 24)', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(24)])),
                ('include_guide', models.BooleanField()),
                ('maximum_spaces', models.IntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('difficulty_level', models.CharField(choices=[('Very Easy', 'Very_Easy'), ('Easy', 'Easy'), ('Medium', 'Medium'), ('Hard', 'Hard'), ('Very Hard', 'Very_Hard'), ('Extreme', 'Extreme')], max_length=16)),
                ('language', models.CharField(max_length=32)),
                ('available_slots', models.IntegerField(help_text='Number of available spots for this activity', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('is_active', models.BooleanField(default=True)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=64, unique=True)),
                ('description', models.TextField(blank=True)),
                ('icon', models.CharField(blank=True, max_length=64)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Category',
                'verbose_name_plural': 'Categories',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Room',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False, verbose_name='room_id')),
                ('room_type', models.CharField(choices=[('single', 'Single'), ('double', 'Double'), ('triple', 'Triple'), ('quadruple', 'Quadruple'), ('suite', 'Suite'), ('family', 'Family'), ('dormitory', 'Dormitory'), ('studio', 'Studio')], db_index=True, max_length=32)),
                ('name', models.CharField(blank=True, help_text='Optional room name/number', max_length=64)),
                ('description', models.TextField(blank=True)),
                ('capacity', models.IntegerField(help_text='Maximum number of people this room can accommodate', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(20)])),
                ('has_private_bathroom', models.BooleanField(default=True)),
                ('has_balcony', models.BooleanField(default=False)),
                ('has_air_conditioning', models.BooleanField(default=True)),
                ('has_wifi', models.BooleanField(default=True)),
                ('base_price_per_night', models.DecimalField(decimal_places=2, help_text='Base price per night for this room type', max_digits=10, validators=[django.core.validators.MinValueValidator(0)])),
                ('currency', models.CharField(default='USD', max_length=3)),
                ('is_active', models.BooleanField(db_index=True, default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'rooms',
                'ordering': ['lodgment', 'room_type', 'name'],
            },
        ),
        migrations.CreateModel(
            name='RoomAvailability',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False, verbose_name='room_availability_id')),
                ('start_date', models.DateField(db_index=True)),
                ('end_date', models.DateField(db_index=True)),
                ('available_quantity', models.IntegerField(help_text='Number of rooms of this type available for the period', validators=[django.core.validators.MinValueValidator(0)])),
                ('max_quantity', models.IntegerField(default=1, help_text='Maximum number of rooms of this type for the period', validators=[django.core.validators.MinValueValidator(1)])),
                ('price_override', models.DecimalField(blank=True, decimal_places=2, help_text='Override price for this period (if different from base price)', max_digits=10, null=True, validators=[django.core.validators.MinValueValidator(0)])),
                ('currency', models.CharField(default='USD', max_length=3)),
                ('is_blocked', models.BooleanField(default=False, help_text='If true, room is blocked and not available for booking')),
                ('minimum_stay', models.IntegerField(default=1, help_text='Minimum number of nights required for booking', validators=[django.core.validators.MinValueValidator(1)])),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'room_availabilities',
                'ordering': ['room', 'start_date'],
            },
        ),
        migrations.CreateModel(
            name='StockAuditLog',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('operation_type', models.CharField(choices=[('reserve', 'Reserva'), ('release', 'Liberación'), ('check', 'Verificación'), ('modify', 'Modificación'), ('create', 'Creación'), ('delete', 'Eliminación')], help_text='Tipo de operación realizada', max_length=16)),
                ('product_type', models.CharField(choices=[('activity', 'Actividad'), ('transportation', 'Transporte'), ('room', 'Habitación'), ('flight', 'Vuelo')], help_text='Tipo de producto afectado', max_length=16)),
                ('product_id', models.IntegerField(help_text='ID del producto específico (availability_id, flight_id, etc.)')),
                ('quantity', models.IntegerField(help_text='Cantidad involucrada en la operación')),
                ('previous_stock', models.IntegerField(blank=True, help_text='Stock anterior a la operación', null=True)),
                ('new_stock', models.IntegerField(blank=True, help_text='Stock después de la operación', null=True)),
                ('user_id', models.IntegerField(blank=True, help_text='ID del usuario que realizó la operación', null=True)),
                ('session_id', models.CharField(blank=True, help_text='ID de sesión para rastrear operaciones', max_length=64, null=True)),
                ('request_id', models.CharField(blank=True, help_text='ID único de la solicitud HTTP', max_length=64, null=True)),
                ('metadata', models.JSONField(blank=True, default=dict, help_text='Información adicional en formato JSON')),
                ('success', models.BooleanField(default=True, help_text='Indica si la operación fue exitosa')),
                ('error_message', models.TextField(blank=True, help_text='Mensaje de error si la operación falló')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'db_table': 'stock_audit_logs',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='StockChangeHistory',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('change_type', models.CharField(choices=[('increase', 'Aumento'), ('decrease', 'Disminución'), ('set', 'Establecer'), ('reset', 'Reiniciar')], help_text='Tipo de cambio realizado', max_length=16)),
                ('field_name', models.CharField(help_text='Nombre del campo que cambió (reserved_seats, available_seats, etc.)', max_length=32)),
                ('old_value', models.IntegerField(blank=True, help_text='Valor anterior del campo', null=True)),
                ('new_value', models.IntegerField(blank=True, help_text='Nuevo valor del campo', null=True)),
                ('change_amount', models.IntegerField(help_text='Cantidad del cambio (positivo para aumentos, negativo para disminuciones)')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'db_table': 'stock_change_history',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='StockMetrics',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('product_type', models.CharField(choices=[('activity', 'Actividad'), ('transportation', 'Transporte'), ('room', 'Habitación'), ('flight', 'Vuelo')], help_text='Tipo de producto', max_length=16)),
                ('product_id', models.IntegerField(help_text='ID del producto específico')),
                ('total_capacity', models.IntegerField(help_text='Capacidad total del producto')),
                ('current_reserved', models.IntegerField(help_text='Cantidad actual reservada')),
                ('current_available', models.IntegerField(help_text='Cantidad actual disponible')),
                ('utilization_rate', models.DecimalField(decimal_places=2, help_text='Porcentaje de utilización (0-100)', max_digits=5)),
                ('total_reservations', models.IntegerField(default=0, help_text='Total de reservas realizadas')),
                ('total_releases', models.IntegerField(default=0, help_text='Total de liberaciones realizadas')),
                ('failed_operations', models.IntegerField(default=0, help_text='Total de operaciones fallidas')),
                ('date', models.DateField(help_text='Fecha de las métricas')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'stock_metrics',
                'ordering': ['-date', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Suppliers',
            fields=[
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('id', models.AutoField(primary_key=True, serialize=False, verbose_name='supplier_id')),
                ('first_name', models.CharField(max_length=64)),
                ('last_name', models.CharField(max_length=64)),
                ('organization_name', models.CharField(max_length=128)),
                ('description', models.TextField()),
                ('street', models.CharField(max_length=32)),
                ('street_number', models.BigIntegerField(help_text='House/street number (can be negative up to -2 and positive up to 200,000)', validators=[django.core.validators.MinValueValidator(-2), django.core.validators.MaxValueValidator(200000)])),
                ('city', models.CharField(max_length=64)),
                ('country', models.CharField(max_length=64)),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('telephone', models.CharField(max_length=16)),
                ('website', models.URLField()),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Transportation',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('type', models.CharField(choices=[('bus', 'Bus'), ('van', 'Van'), ('car', 'Private Car'), ('shuttle', 'Shuttle'), ('train', 'Train'), ('other', 'Other')], default='bus', max_length=16)),
                ('description', models.TextField()),
                ('notes', models.TextField(blank=True)),
                ('capacity', models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(100)])),
                ('is_active', models.BooleanField(default=True)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='TransportationAvailability',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('departure_date', models.DateField()),
                ('departure_time', models.TimeField()),
                ('arrival_date', models.DateField()),
                ('arrival_time', models.TimeField()),
                ('total_seats', models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(1)])),
                ('reserved_seats', models.PositiveIntegerField(default=0)),
                ('price', models.DecimalField(decimal_places=2, max_digits=10)),
                ('currency', models.CharField(default='USD', max_length=8)),
                ('state', models.CharField(default='active', max_length=32)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='ActivityAvailability',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('event_date', models.DateField()),
                ('start_time', models.TimeField()),
                ('total_seats', models.IntegerField(help_text='Total number of seats for this activity event', validators=[django.core.validators.MinValueValidator(0)])),
                ('reserved_seats', models.IntegerField(help_text='Number of seats already reserved', validators=[django.core.validators.MinValueValidator(0)])),
                ('price', models.DecimalField(decimal_places=2, help_text='Price per person for this date', max_digits=10)),
                ('currency', models.CharField(help_text='Currency code (e.g., USD, ARS)', max_length=8)),
                ('state', models.CharField(default='active', help_text='Current availability status (e.g., active, canceled)', max_length=32)),
                ('activity', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='availabilities', to='products.activities')),
            ],
        ),
        migrations.CreateModel(
            name='Location',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(default='Non Named Location', help_text='Display name (city, airport, etc.)', max_length=128)),
                ('country', models.CharField(max_length=64)),
                ('state', models.CharField(blank=True, default='', max_length=64)),
                ('city', models.CharField(blank=True, default='', max_length=64)),
                ('code', models.CharField(blank=True, default='', help_text='IATA/ICAO code or custom code', max_length=16)),
                ('type', models.CharField(choices=[('country', 'Country'), ('state', 'State/Province'), ('city', 'City'), ('district', 'District/Locality'), ('airport', 'Airport'), ('terminal', 'Terminal'), ('other', 'Other')], default='city', help_text='Type of location (city, airport, terminal, etc.)', max_length=16)),
                ('latitude', models.DecimalField(blank=True, decimal_places=6, max_digits=9, null=True)),
                ('longitude', models.DecimalField(blank=True, decimal_places=6, max_digits=9, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('parent', models.ForeignKey(blank=True, help_text='Parent location (for hierarchy, e.g., city belongs to country)', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='children', to='products.location')),
            ],
            options={
                'ordering': ['country', 'state', 'city', 'name'],
            },
        ),
        migrations.CreateModel(
            name='Flights',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False, verbose_name='flight_id')),
                ('airline', models.CharField(max_length=32)),
                ('flight_number', models.CharField(max_length=16)),
                ('departure_date', models.DateField()),
                ('arrival_date', models.DateField()),
                ('duration_hours', models.IntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(192)])),
                ('departure_time', models.TimeField()),
                ('arrival_time', models.TimeField()),
                ('class_flight', models.CharField(choices=[('Basic Economy', 'Basic_Economy'), ('Economy', 'Economy'), ('Premium Economy', 'Premium_Economy'), ('Business Class', 'Business'), ('First Class', 'First')], max_length=32)),
                ('available_seats', models.IntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(500)])),
                ('capacity', models.IntegerField(default=0, help_text='Maximum number of seats for this flight', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(500)])),
                ('luggage_info', models.CharField(max_length=128)),
                ('aircraft_type', models.CharField(max_length=32)),
                ('terminal', models.CharField(blank=True, max_length=32, null=True)),
                ('gate', models.CharField(blank=True, max_length=32, null=True)),
                ('notes', models.TextField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('destination', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='flights_arriving', to='products.location')),
                ('origin', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='flights_departing', to='products.location')),
            ],
        ),
        migrations.AddField(
            model_name='activities',
            name='location',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='products.location'),
        ),
        migrations.CreateModel(
            name='Lodgments',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False, verbose_name='lodgment_id')),
                ('name', models.CharField(db_index=True, default='Non Named Lodgment', max_length=128)),
                ('description', models.TextField(blank=True)),
                ('type', models.CharField(choices=[('hotel', 'Hotel'), ('hostel', 'Hostel'), ('apartment', 'Apartment'), ('house', 'House'), ('cabin', 'Cabin'), ('resort', 'Resort'), ('bed_and_breakfast', 'Bed And Breakfast'), ('villa', 'Villa'), ('camping', 'Camping')], default=api.products.models.LodgmentType['HOTEL'], help_text='Type of accommodation', max_length=32)),
                ('max_guests', models.IntegerField(default=1, help_text='Maximum number of guests the property can accommodate', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(50)])),
                ('contact_phone', models.CharField(blank=True, max_length=20)),
                ('contact_email', models.EmailField(blank=True, max_length=254)),
                ('amenities', models.JSONField(blank=True, default=list, help_text='List of available amenities')),
                ('date_checkin', models.DateField(db_index=True)),
                ('date_checkout', models.DateField(db_index=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(db_index=True, default=True)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('location', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='products.location')),
            ],
            options={
                'db_table': 'lodgments',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Packages',
            fields=[
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('id', models.AutoField(primary_key=True, serialize=False, verbose_name='package_id')),
                ('name', models.CharField(max_length=64, verbose_name='package_name')),
                ('description', models.TextField()),
                ('cover_image', models.URLField(blank=True, help_text='Featured image of the package')),
                ('base_price', models.DecimalField(blank=True, decimal_places=2, help_text='Base price without taxes', max_digits=10, null=True)),
                ('taxes', models.DecimalField(blank=True, decimal_places=2, help_text='Taxes or surcharges', max_digits=10, null=True)),
                ('final_price', models.DecimalField(decimal_places=2, help_text='Total final price of the package', max_digits=10)),
                ('rating_average', models.DecimalField(decimal_places=2, default=0, help_text='Average rating (0-5)', max_digits=3, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(5)])),
                ('total_reviews', models.IntegerField(default=0)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('category', models.ForeignKey(blank=True, help_text='Tour package category', null=True, on_delete=django.db.models.deletion.PROTECT, to='products.category')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ProductsMetadata',
            fields=[
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('id', models.AutoField(primary_key=True, serialize=False, verbose_name='product_metadata_id')),
                ('start_date', models.DateField(default=django.utils.timezone.now)),
                ('end_date', models.DateField(default=django.utils.timezone.now)),
                ('object_id', models.PositiveIntegerField()),
                ('unit_price', models.DecimalField(decimal_places=2, default=0, help_text='Unit price of the product', max_digits=10, validators=[django.core.validators.MinValueValidator(0)])),
                ('currency', models.CharField(default='USD', max_length=3)),
                ('is_active', models.BooleanField(default=True)),
                ('content_type_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.contenttype')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ComponentPackages',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False, verbose_name='component_package_id')),
                ('order', models.IntegerField(help_text='Display order within the package')),
                ('quantity', models.IntegerField(help_text='Number of times this product is included', null=True)),
                ('title', models.CharField(blank=True, help_text='Visible name of the component in the package details', max_length=128)),
                ('start_date', models.DateField(blank=True, help_text='Start date of component usage', null=True)),
                ('end_date', models.DateField(blank=True, help_text='End date of component usage', null=True)),
                ('package', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='componentpackages', to='products.packages', verbose_name='package_id')),
                ('product_metadata', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='products.productsmetadata', verbose_name='product_metadata_id')),
            ],
        ),
        migrations.CreateModel(
            name='Promotions',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False, verbose_name='promotion_id')),
                ('name', models.CharField(max_length=64)),
                ('discount', models.DecimalField(decimal_places=2, help_text='Discount percentage (0-100)', max_digits=5, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('start_date', models.DateField()),
                ('end_date', models.DateField()),
                ('is_active', models.BooleanField()),
                ('package', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='products.packages', verbose_name='package_id')),
                ('product_metadata', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='products.productsmetadata', verbose_name='product_metadata_id')),
            ],
        ),
        migrations.CreateModel(
            name='Reviews',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False, verbose_name='review_id')),
                ('punctuation', models.DecimalField(decimal_places=2, help_text='Review rating (0-5)', max_digits=3, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(5)])),
                ('comment', models.TextField()),
                ('date', models.DateField()),
                ('package', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='products.packages', verbose_name='package_id')),
                ('product_metadata', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='products.productsmetadata', verbose_name='product_metadata_id')),
            ],
        ),
    ]
